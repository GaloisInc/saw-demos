// LLVM utility definitions

// Remove 'crucible' from common commands
let points_to = crucible_points_to;
let precond = crucible_precond;
let from_cryptol = crucible_term;

let execute = crucible_execute_func;
let postcond = crucible_postcond;
let returns = crucible_return;
let array = crucible_array;
let llvm_verify module function_name overrides spec =
  crucible_llvm_verify module function_name overrides true spec z3;

// Declare constants used to denote whether an allocation is
// 'READONLY' (CONST) or not (WRITE).
let CONST = {{ False }};
let WRITE = {{ True }};

// Returns a newly-allocated pointer of the given type.
let pointer (rw : Term) (type : LLVMType) = if (eval_bool {{ rw == WRITE }})
                      then crucible_alloc type
                      else crucible_alloc_readonly type;

//Symbolic value --- for use with the `variable` function.
let SYM   = { symbolic={{ True }} : Term, t={{ False }} : Term};
//Concrete value --- for use with the `variable` function.
let CON t = { symbolic={{ False }} : Term, t=t : Term};

// Returns a NULL pointer, the SetupValue, and a Term for either a new
// symbolic variable or a term passed in.
// Should be called like:
//   variable "name" (llvm_int 32) SYM;
// or
//   variable "name" (llvm_int 32) (CON {{ 10 : [32] }});
let variable (name : String) (type : LLVMType) (v : { symbolic : Term, t : Term}) = do {
  cfv <- crucible_fresh_var name type;
  let t = if (eval_bool v.symbolic) then cfv else v.t;
  return {p=crucible_null, s=from_cryptol t, t=t};
};

// Returns a newly-allocated pointer of the given type that points to
// a new symbolic variable. Also returns the SetupValue and Term for
// the variable.
let alloc (name : String) (rw : Term) (type : LLVMType) = do {
  p <- pointer rw type;
  v <- variable name type SYM;
  points_to p v.s;
  return {p=p, s=v.s, t=v.t};
};

// Returns a newly-allocated pointer of the given type that points to
// a given variable : SetupValue. Also returns the SetupValue and Term for
// the variable.
let alloc_init (name : String) (rw : Term) (type : LLVMType) (v : {p : SetupValue, s : SetupValue, t : Term}) = do {
  p <- pointer rw type;
  points_to p v.s;
  return {p=p, s=v.s, t=v.t};
};

// Standard LLVM type names
let i8 = llvm_int 8;
let i16 = llvm_int 16;
let i32 = llvm_int 32;
let i64 = llvm_int 64;

// Standard C type names
let int8_t = llvm_int 8;
let int16_t = llvm_int 16;
let int32_t = llvm_int 32;
let int64_t = llvm_int 64;
let uint8_t = llvm_int 8;
let uint16_t = llvm_int 16;
let uint32_t = llvm_int 32;
let uint64_t = llvm_int 64;
let char = llvm_int 8;

// Provides the type of a struct. For example, 'struct_t "mystruct_t"';
let struct_t (name : String) = llvm_struct (str_concat "struct." name);

let struct struct_name rw (s : [SetupValue]) = do {
  let s_struct = crucible_struct s;
  p_struct <- pointer rw (struct_t struct_name);
  points_to p_struct s_struct;
  return {p=p_struct, s=s_struct, t={{ zero }}};
};

// Provides a pointer, SetupValue, and Term associated with a string
// of size `size+1` that is NULL terminated. The Term (Cryptol value)
// DOES NOT have the NULL at the end of the string.
// This is to be used before the `execute` command.
let string_t (string_name : String) (rw : Term) (size : Int) = do {
  string <- crucible_fresh_var string_name (llvm_array size uint8_t);
  pstring <- pointer rw (llvm_array (eval_int {{ `size + 1 : [64] }}) uint8_t);
  points_to pstring (from_cryptol {{ string # [0] }});
  return {p=pstring, s=from_cryptol string, t=string};
};

// Provides a pointer, SetupValue, and Term associated with a string
// of size `size+1` that is NULL terminated. The Term (Cryptol value)
// DOES have the NULL at the end of the string.
// This is to be used after the `execute` command.

let string_t' (string_name : String) (size : Int) = do {
  string <- alloc "string" CONST (llvm_array (eval_int {{ `(size+1) : [64] }}) uint8_t);
  let s = string.t;
  postcond {{ s@(`size : [64]) == 0 }};
  return {p=string.p, s=from_cryptol string.t, t=string.t};
};

// This function will cause llvm_verify to error and, most
// importantly, provide a handy backtrace.
let error = do {
  crucible_precond {{ True }};
  crucible_postcond {{ True }};
  return {{ True }};
};

// This function is useful in the opposite case of an `if` statement
// with an `error`.
let noerror = do {
  return {{ True }};
};

// Provides an empty list of structures. Used as the basecase for `struct_list_rec`.
let struct_list_empty = do {
  return {s=[] : [SetupValue], bucket=[] : [b]} : CrucibleSetup {s : [SetupValue], bucket : [b]};
};

// Provides a list of initialized structs and a same-sized list of
// buckets where associated values can be stored.
rec struct_list_rec (numElements : Int) (init_function : Int -> a -> CrucibleSetup {s : SetupValue, bucket : b}) (params : a) = do {
  err <- if (eval_bool {{ (`numElements : [32]) == 0 }}) then error else noerror; //numElements must be greater than 0
  element <- init_function (eval_int {{ (`numElements : [32]) - 1 }}) params;
  rest <- if (eval_bool {{ (`numElements : [32]) == 1 }}) then struct_list_empty
          else struct_list_rec (eval_int {{ (`numElements : [32]) - 1 }}) init_function params;

  let ret_s = (concat rest.s [element.s]);
  let ret_bucket = (concat rest.bucket [element.bucket]);

  return {s=ret_s : [SetupValue], bucket=ret_bucket : [b]};
};

// Provides an array of initialized structs and a same-sized list of
// buckets where associated values can be stored.
let struct_array (rw : Term) (numElements : Int) (init_function : Int -> a -> CrucibleSetup {s : SetupValue, bucket : b}) (params : a) (type : LLVMType) = do {
  list <- struct_list_rec numElements init_function params;
  let arr = array list.s;
  p <- pointer rw (llvm_array numElements type);
  points_to p arr;
  return {p=p : SetupValue, s=arr : SetupValue, bucket=list.bucket : [b]};
};
